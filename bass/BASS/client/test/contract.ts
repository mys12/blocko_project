import chai from 'chai';
import chaiAsPromised from 'chai-as-promised';
chai.use(chaiAsPromised);
const assert = chai.assert;


import AergoClient from '../src';
import petAbi from './fixtures/pet.abi.json';
import Contract from '../src/models/pet';

describe('Contracts', () => {
    const aergo = new AergoClient();

    describe('deploy, call, query a simple contract', () => {
        const contractCode = '2CcywYUixGprLSMBTRecPCFoQGKdqoKCyHGzycoqRUpckts96Dfrj4w47hf5PbgeGy6C16Y1euUcB5C3tbgkoHA6K2WGnJsNtux6ngPzMpqyBUJzJdkN4TzacGBBgk3KVeJjBWgZbtnGK6MQSnw24F3nnatsomhi9qqLPinQ8RZTggepq6sCqHdk31YKsFAsC8F97xVo8BqmHb5BQX79aahKcbiXB5DczRouuxcqbYU2fb4UgrdLTxtVCZrPN8Aa2oY4G8yVQdWUrBfC6b7k5bran6LXVLSP4Kt6xovEWBhvAFTCyQEWg8PpDAujPRVGimyDnccivgmfbUk9SFz8PKKFcTwFAcPeP94KsUEWxk8v17DoXDx2BxBR3LQVvRaeXeiV1324bu64FaBUEX7VfYkM2CzDPB7fTwcUZD71sP9PUjoTHjjjopj8FYniF3tkYm4uBzVtexUfytisRf2e328d4sHhQVApsCkvsGqyQfebow6s8QZjssKgXs5k3TsyhFMoxLgsY6R6WAQCpWiDfaF22nj5qzLk6RdkQjDMaSmpYKWJTp7wLNpaTmvcJtvnAQfNKPhshxzTM9pL1r4J8CdkfRnAfJK5CCMudjDCGE9Cia7osJdbGdw8zCs8SYKNVie3CbVB22UV4j411gUpnsBqhm1kG3ka5m1Y7eyy8FDLUKB8kk72zBgJtFKwh9aMcuWbDhWNKyrWxgxuK9b5m3vVFXzj9JeL88bg5pcXWUcRp7qSVufNnBaWAk8d4w7CQGS7kPX1pEnfGVCUshAMy9NDBj9BgfzTMi2bcQKwM3N2jcbVjc4ovQiWUctK4Mhde1kwWZirFn4HDN5NmEs9p3FvS9V5AmjWyecCvqYfc2LKhkodrKE3hPU9yASYjticCSuk5N9w2D9c4PNQ8yDQ3qzjfpg4MXDYAbArSnVKgBQsBLX7npYoEQKfgrFJuXki74CPspgry6iiRumhS8JSAsJpXU82LNj5GTKc3b69qx52fBPYBm1n3Z3XToSD4BoESg9ngWCRDzhWBpuPvsWog2v3rSghgyqYjWtrJYk5wN8q1ppmeEjC1se4rH6ZXZE7xLbmmCXgHZmQR7R7WeFpPZNmVJpQJVHYPfFD4eoyWRgLrwnx3DCs349cmwKk7Qg98Tsujdea6gWkiE2F3VQz6FmT2iKeJs2CHjErbam2yac3UgGN8U8gLh7WE6pBjcq7dcyUWPAz9Prtjf1PuDe6cn7jLw3A8';
        let contractAddress = AmfxoHRSTXDTBpBuKfcAq9UEZxDNn33qx5uipXUYk9p713jvNRTo;
        let testAddress;
        let deployTxhash;

        it('should deploy a smart contract', async () => {
          testAddress = await aergo.accounts.create('test');
          await aergo.accounts.unlock(testAddress, 'test');

          // Deploy contract
            const contract = Contract.fromCode(contractCode);
            const testtx = {
                from: testAddress,
                to: null,
                payload: contract.asPayload([10]),
                chainIdHash: await aergo.getChainIdHash(),
            };
            deployTxhash = await aergo.accounts.sendTransaction(testtx);
            assert.typeOf(deployTxhash, 'string');

            // Wait for deployment receipt
            const receipt = await longPolling(async () =>
                await aergo.getTransactionReceipt(deployTxhash)
                , result => result.hasOwnProperty('contractaddress'), 2000);
            assert.equal(receipt.status, 'CREATED', `Deployment failed with error: ${receipt.result}`);
            assert.isAbove(receipt.gasused, 0);
            contractAddress = receipt.contractaddress;
        }).timeout(2100);

        it('should get a smart contract\'s ABI', async () => {
            const abi = await aergo.getABI(contractAddress);
            // getABI returns fields that are not currently in the ABI generated by aergoluac
            const abiFiltered = {
                ...abi,
                functions: abi.functions.map(func => ({
                    name: func.name,
                    arguments: func.arguments,
                })),
                state_variables: abi.state_variables.map(variable => ({
                    name: variable.name,
                    type: variable.type,
                }))
            }
            assert.deepEqual(abiFiltered, contractAbi);
        });

        it('should load ABI from smart contract', async () => {
            const contract = Contract.atAddress(contractAddress);
            contract.loadAbi(await aergo.getABI(contractAddress));
            // @ts-ignore
            assert.typeOf(contract.inc, 'function');
        });

        it('should call a smart contract', async () => {
            // Setup address and ABI
            const contract = Contract.fromAbi(contractAbi).setAddress(contractAddress);

            // Call contract
            // @ts-ignore
            const callTx = contract.inc().asTransaction({
                from: testAddress,
                chainIdHash: await aergo.getChainIdHash(),
            });
            assert.equal(callTx.from, testAddress);
            const calltxhash = await aergo.accounts.sendTransaction(callTx);
            const calltxreceipt = await longPolling(async () =>
                await aergo.getTransactionReceipt(calltxhash)
            );
            assert.equal(calltxreceipt.status, 'SUCCESS', `Call failed with error: ${calltxreceipt.result}`);

            // Test missing from address
            assert.throws(() => {
                // @ts-ignore
                aergo.accounts.sendTransaction(contract.inc().asTransaction());
            }, Error, 'Missing required transaction parameter \'from\'. Call with asTransaction({from: ...})');
            assert.throws(() => {
                // @ts-ignore
                aergo.accounts.sendTransaction(contract.inc().asTransaction({
                    from: null,
                }));
            }, Error, 'Missing required transaction parameter \'from\'. Call with asTransaction({from: ...})');
        });
